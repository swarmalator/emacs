----------------------------------------------
--
-- Cole Turner
-- Haskell Plotting Experimentation
-- April 15, 2018
--
----------------------------------------------
module Plot where

import Graphics.Gloss
import Graphics.Gloss.Data.Color (makeColor, yellow, white)
import Polynomials

main :: IO()
main = play
       (InWindow "Haskell Plotting" (500,500) (10,10))
       (makeColor 0.0 0.0 0.0 1)
       10
       0.0
       picture
       (\e t -> t)
       (\dt t -> if (t>25) then t else (t+dt))

{-
plot :: (Float -> Float) -> Float -> Float -> Float -> Path
plot func minx maxx num =
  let dx = ((maxx - minx) / num)
  in map (\n -> ((minx+n*dx),func (minx+n*dx))) [0..num]
-}

plot :: ((Float, Float) -> ([Float],[Float])) -> (Float, Float) -> Float -> Float -> Int -> Path
plot series (xmin,xmax) xnum (x0,y0) pow =
  let dx = ((xmax - xmin) / xnum)
      (xs,ys) = (function series pow y0 (xmin + nx*dx))
  in ((map (\nx -> ((xmin + nx*dx), )) [0..(xnum-1)]), (map (\nx -> ((xmin + nx*dx), (function series pow y0 (xmin + nx*dx)))) [0..(xnum-1)]))
    
picture :: Float -> Picture
-- picture t = Color white $
--  scale 50 50 $ Line $ plot (function t) (-pi) pi (50*t)
picture t =
  let rate = 2
  in scale 50 50 $ Pictures $
  [ axes 
  , Color yellow $ Line $
    plot solveDiffEq2 (-5,5) 100 0.1 (round (rate*t))
  ]

axes :: Picture
axes = Color white
  $ Pictures $ (Pictures $ (Line [((-5000),0),(5000,0)]):(Line [(0,(-5000)),(0,5000)]):(map (\x -> Line [(x, (-0.125)),(x,0.125)]) [(-5)..5]) ):(map (\y -> Line [((-0.125), y),(0.125, y)]) [(-5)..5]) 

----------------------- FINISH TWO DIMENSIONAL PLOTTING

function :: ((Float,Float) -> ([Float],[Float])) -> Int -> (Float,Float) -> Float -> Float
function series num (x0,y0) t = sum $ take num $ zipWith (*) (map (x^) [0..]) (series y0)

{-
function :: Float -> Float -> Float
function t x = x^2 - 0.1*t^2
-}
