import Data.Maybe

tree :: [[[Integer]]]
tree = [[[0, 0, 0, 0, 0],[0, 0, 0, 0, 0],[0, 0, 17, 0, 0],[0, 0, 0, 0, 0],[0, 0, 0, 0, 0]],[[0, 0, 0, 0, 0],[0, 0, 0, 0, 0],[0, 0, 17, 0, 0],[0, 0, 0, 0, 0],[0, 0, 0, 0, 0]],[[0, 0, 0, 0, 0],[0, 0, 0, 0, 0],[0, 0, 17, 0, 0],[0, 0, 0, 0, 0],[0, 0, 0, 0, 0]],[[18, 18, 18, 18, 18],[18, 18, 18, 18, 18],[18, 18, 17, 18, 18],[18, 18, 18, 18, 18],[0, 18, 18, 18, 0]],[[0, 18, 18, 18, 18],[18, 18, 18, 18, 18],[18, 18, 17, 18, 18],[18, 18, 18, 18, 18],[0, 18, 18, 18, 0]],[[0, 0, 0, 0, 0],[0, 0, 18, 18, 0],[0, 18, 17, 18, 0],[0, 0, 18, 0, 0],[0, 0, 0, 0, 0]],[[0, 0, 0, 0, 0],[0, 0, 18, 0, 0],[0, 18, 18, 18, 0],[0, 0, 18, 0, 0],[0, 0, 0, 0, 0]]]

coord_matrix_join_2d :: Int -> [Integer] -> [[(Integer, Integer)]]
coord_matrix_join_2d n arr = zipWith (zip . repeat) [0..] $ take n $ repeat arr

coord_matrix_join_3d :: Int -> [[(Integer, Integer)]] -> [[[(Integer, Integer, Integer)]]]
coord_matrix_join_3d n arr = zipWith (zipWith (zipWith (\a (b,c) -> (a,b,c)) . repeat) . repeat) [0..] $ take n $ repeat arr

coord_matrix :: Int -> Int -> Int -> [[[(Integer, Integer, Integer)]]]
coord_matrix nx ny nz = coord_matrix_join_3d ny xz_matrix
  where xz_matrix = coord_matrix_join_2d nx $ take nx [0..]

to_plot :: [[[Integer]]] -> [[[(Integer, Integer, Integer)]]] -> [(Integer, Integer, Integer)]
to_plot blocks coords = catMaybes $ concat $ concat $ (zipWith (zipWith (zipWith (\a p -> if (a /= 0) then (Just p) else Nothing)))) blocks coords
