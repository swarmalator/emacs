#+TITLE: Emacs setting

This is my Emacs settings file. 

* .emacs file                                                      :noexport:
#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize)
(require 'org)
(org-babel-load-file
 (expand-file-name "settings.org"
                   user-emacs-directory))
#+END_SRC

* ido-mode
#+BEGIN_SRC emacs-lisp
(ido-mode t)
#+END_SRC
* MELPA
#+BEGIN_SRC emacs-lisp
(setq package-archives
   (quote
    (("gnu" . "http://elpa.gnu.org/packages/")
     ("melpa" . "http://melpa.milkbox.net/packages/"))))
#+END_SRC

* helm
M-x package-install
helm
#+BEGIN_SRC emacs-lisp 
(require 'helm)
(helm-mode t)  
#+END_SRC
** enable Helm M-x
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-x") 'helm-M-x)
#+END_SRC
   
* org-mode
M-x package-install
org
#+BEGIN_SRC emacs-lisp
(require 'org)
#+END_SRC
** startup indented
#+BEGIN_SRC emacs-lisp 
(setq org-startup-indented t)
#+END_SRC

** spell checking
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC

** word wrap
#+BEGIN_SRC emacs-lisp
(toggle-word-wrap)
#+END_SRC
** visual-line-mode
#+BEGIN_SRC emacs-lisp 
(add-hook 'org-mode-hook 'visual-line-mode)
#+END_SRC
** visual-fill-column-mode
M-x package-install
visual-fill-column
#+BEGIN_SRC emacs-lisp
(require 'visual-fill-column)
(add-hook 'visual-line-mode-hook 'visual-fill-column-mode)
#+END_SRC

** org-bullets
M-x package-install
org-bullets
#+BEGIN_SRC emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook 'org-bullets-mode)
(setq org-bullets-bullet-list (quote ("•" "‣" "⁃" "→")))
#+END_SRC


** journal
M-x install-package
org-journal

For Emacs 24, download org-journal version 1.13.1 from
https://github.com/bastibe/org-journal/releases
#+BEGIN_SRC emacs-lisp
(require 'org-journal)
#+END_SRC
** Extra
*** capture
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

*** agenda
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC

*** mind mapping
M-x package-install
org-mind-map
#+BEGIN_SRC emacs-lisp
(require 'ox-org)
(load "~/.emacs.d/elpa/org-mind-map-20180826.2340/org-mind-map.el")
#+END_SRC

*** emphasized text
#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC
*** ellipsis
#+BEGIN_SRC emacs-lisp
(setq org-ellipsis "▾")
#+END_SRC
*** publish project as HTML
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c p") 'org-publish-project)
(global-set-key (kbd "C-c P") 'org-publish-all)
(setq org-publish-project-alist
      '(
	("org-html"
	 :base-directory "~/Documents/web/src"
	 :base-extension "org"
	 :publishing-directory "~/Documents/web/html"
	 :recursive nil
	 :publishing-function org-html-publish-to-html
	 :headline-levels 4             ; Just the default for this project.
	 :auto-preamble t
	 :auto-sitemap t
	 :sitemap-sort-folders ignore)
	("org-resources"
	 :base-directory "~/Documents/web/src" 
	 :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
	 :publishing-directory "~/Documents/web/html"
	 :recursive t
	 :publishing-function org-publish-attachment
	 )
	("org-journal"
	 :base-directory "~/Documents/journal/"
	 :base-extension "org"
	 :publishing-directory "~/Documents/web/html/journal" 
	 :recursive nil
	 :publishing-function org-publish-attachment
	 )))
#+END_SRC

* backups
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup")))
#+END_SRC
* soothe-theme
M-x package-install
soothe-theme
#+BEGIN_SRC emacs-lisp
(setq custom-safe-themes
   (quote       ("a77ced882e25028e994d168a612c763a4feb8c4ab67c5ff48688654d0264370c" default)))
(load-theme 'soothe)
#+END_SRC
* smartparens
M-x install-package
smartparens
#+BEGIN_SRC emacs-lisp 
(smartparens-global-mode t)
(show-smartparens-global-mode t)
(define-key smartparens-mode-map (kbd "C-S-<left>") 'sp-forward-barf-sexp)
(define-key smartparens-mode-map (kbd "C-S-<right>") 'sp-forward-slurp-sexp)
(setq sp-use-subword t)
#+END_SRC
** pairs
#+BEGIN_SRC emacs-lisp
(sp-local-pair '(emacs-lisp-mode lisp-interaction-mode) "'" nil :actions nil)
(sp-local-pair '(org-mode tex-mode) "$" "$")
(sp-local-pair '(org-mode tex-mode) "\\textit{" "}" :insert "C-S-i")
(sp-local-pair '(org-mode tex-mode) "\\textbf{" "}" :insert "C-S-b")
(sp-local-pair '(org-mode tex-mode) "\\left(" "\\right)" :insert "C-c l")
(sp-local-pair '(org-mode tex-mode) "\\left[" "\\right]" :insert "C-c L")
(sp-local-pair '(java-mode) "System.out.println(" ")" :trigger "syso")
#+END_SRC

* Movement keys
#+BEGIN_SRC emacs-lisp 
(global-set-key (kbd "C-f") 'forward-word)
(global-set-key (kbd "C-b") 'backward-word)
(global-set-key (kbd "M-f") 'sp-forward-sexp)
(global-set-key (kbd "M-b") 'sp-backward-sexp)
(global-set-key (kbd "M-p") 'sp-up-sexp)
(global-set-key (kbd "M-n") 'sp-down-sexp)
(global-set-key (kbd "M-P") 'sp-backward-up-sexp)
(global-set-key (kbd "M-N") 'sp-backward-down-sexp)
#+END_SRC

* Bookmarks
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c b") 'bookmark-jump)
#+END_SRC

* My functions
#+BEGIN_SRC emacs-lisp
(defun my-M-x () (interactive)
       (setq unread-command-events (listify-key-sequence "my-"))
       (call-interactively 'helm-M-x))
#+END_SRC

** transparency 
#+BEGIN_SRC emacs-lisp
(defun my-transparency (b) (interactive "P")
       (set-frame-parameter (selected-frame) 'alpha (if b (- 100 (* b 5)) 100)))
(set-frame-parameter (selected-frame) 'alpha 100)
(global-set-key (kbd "C-c t") 'my-transparency)
#+END_SRC

** comment/uncomment
#+BEGIN_SRC emacs-lisp
(defun my-comment-or-uncomment () (interactive)
       (if (region-active-p)
	   (call-interactively 'comment-or-uncomment-region)
	 (comment-or-uncomment-region (point-at-bol) (point-at-eol))))
(global-set-key (kbd "C-c ;") 'my-comment-or-uncomment)
#+END_SRC

* Company auto-complete
M-x package-install
company
#+BEGIN_SRC emacs-lisp
(global-company-mode t)
#+END_SRC

* Time and Date
#+BEGIN_SRC emacs-lisp
(setq display-time-day-and-date t)
(display-time-mode t)
#+END_SRC
* Remove Menu/scroll bars
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC
* Column number
#+BEGIN_SRC emacs-lisp
(column-number-mode t)
#+END_SRC
